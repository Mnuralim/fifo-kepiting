// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User management model
model User {
  id        String   @id @unique @default(uuid())
  username  String   @unique @db.VarChar(50)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(100)
  role      Role     @default(ADMIN)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stocks Stock[]
  sales  Sale[]

  @@map("users")
}

enum Role {
  ADMIN
  OWNER
}

// Crab/Crab product model
model Crab {
  id           String   @id @unique @default(uuid())
  crabCode     String   @unique @db.VarChar(50)
  crabName     String   @db.VarChar(150)
  crabType     String   @db.VarChar(100) // Blue Swimming Crab, Mud Crab, etc.
  unit         String   @default("Kg") @db.VarChar(20)
  sellingPrice Float
  description  String?  @db.Text
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  stocks      Stock[]
  saleDetails SaleDetail[]

  @@map("crab")
}

// Stock model (FIFO implementation)
model Stock {
  id             String      @id @unique @default(uuid())
  stockCode      String      @unique @db.VarChar(50)
  crabId         String
  entryDate      DateTime
  entryQuantity  Float
  remainingStock Float // Remaining unsold stock
  purchasePrice  Float // Purchase price/COGS per unit
  totalCost      Float // Total purchase cost
  supplier       String?     @db.VarChar(150) // Supplier
  notes          String?     @db.Text
  stockStatus    StockStatus @default(AVAILABLE)
  userId         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  crab            Crab             @relation(fields: [crabId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  stockOutDetails StockOutDetail[]

  @@index([crabId, entryDate, stockStatus]) // Index for FIFO query
  @@map("stocks")
}

enum StockStatus {
  AVAILABLE
  EMPTY
}

// Customer model
model Customer {
  id           String   @id @unique @default(uuid())
  customerCode String   @unique @db.VarChar(50)
  customerName String   @db.VarChar(150)
  address      String?  @db.Text
  phone        String?  @db.VarChar(20)
  businessType String?  @db.VarChar(100) // Restaurant, Trader, Cafe, etc.
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  sales Sale[]

  @@map("customers")
}

// Sales transaction model
model Sale {
  id            String     @id @unique @default(uuid())
  saleNumber    String     @unique @db.VarChar(50)
  saleDate      DateTime
  customerId    String
  buyerName     String?    @db.VarChar(150) // For buyers without customer data
  totalPrice    Float
  totalCOGS     Float // Total Cost of Goods Sold (FIFO)
  grossProfit   Float // Gross profit from this sale
  paymentMethod String     @db.VarChar(50) // Cash, Transfer
  saleStatus    SaleStatus @default(COMPLETED)
  notes         String?    @db.Text
  userId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  customer    Customer?    @relation(fields: [customerId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  saleDetails SaleDetail[]

  @@map("sales")
}

enum SaleStatus {
  COMPLETED
  CANCELLED
}

// Sale detail model
model SaleDetail {
  id          String   @id @unique @default(uuid())
  saleId      String
  crabId      String
  quantity    Float
  unitPrice   Float
  subtotal    Float
  totalCOGS   Float // Total COGS for this item (from FIFO)
  grossProfit Float // Gross profit for this item
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sale            Sale             @relation(fields: [saleId], references: [id], onDelete: Cascade)
  crab            Crab             @relation(fields: [crabId], references: [id])
  stockOutDetails StockOutDetail[]

  @@map("sale_details")
}

// Stock out tracking model for FIFO
model StockOutDetail {
  id                String   @id @unique @default(uuid())
  saleDetailId      String
  stockId           String
  quantityOut       Float
  unitPurchasePrice Float
  totalPurchaseCost Float
  createdAt         DateTime @default(now())

  // Relations
  saleDetail SaleDetail @relation(fields: [saleDetailId], references: [id], onDelete: Cascade)
  stock      Stock      @relation(fields: [stockId], references: [id])

  @@map("stock_out_details")
}

// Final report model
model FinalReport {
  id               String   @id @unique @default(uuid())
  period           String   @db.VarChar(50) // Format: YYYY-MM or YYYY
  startDate        DateTime
  endDate          DateTime
  totalSales       Float
  totalCOGS        Float
  totalGrossProfit Float
  transactionCount Int
  totalStockIn     Float
  totalStockOut    Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([period])
  @@map("final_reports")
}
